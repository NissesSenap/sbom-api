// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getApplication = `-- name: GetApplication :one
SELECT id FROM Applications WHERE name = $1
`

func (q *Queries) GetApplication(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, getApplication, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getApplicationPackage = `-- name: GetApplicationPackage :one
SELECT 1 FROM ApplicationPackages WHERE application_id = $1 AND package_id = $2 AND license_id = $3
`

type GetApplicationPackageParams struct {
	ApplicationID int32
	PackageID     int32
	LicenseID     int32
}

func (q *Queries) GetApplicationPackage(ctx context.Context, arg GetApplicationPackageParams) (int32, error) {
	row := q.db.QueryRow(ctx, getApplicationPackage, arg.ApplicationID, arg.PackageID, arg.LicenseID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getLicense = `-- name: GetLicense :one
SELECT id FROM Licenses WHERE name = $1
`

func (q *Queries) GetLicense(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, getLicense, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getPackage = `-- name: GetPackage :one
SELECT id FROM Packages WHERE name = $1
`

func (q *Queries) GetPackage(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, getPackage, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getVersion = `-- name: GetVersion :one
SELECT id FROM Versions WHERE package_id = $1 AND version = $2
`

type GetVersionParams struct {
	PackageID int32
	Version   string
}

func (q *Queries) GetVersion(ctx context.Context, arg GetVersionParams) (int32, error) {
	row := q.db.QueryRow(ctx, getVersion, arg.PackageID, arg.Version)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertApplication = `-- name: InsertApplication :one
INSERT INTO Applications (name, sbom_url) VALUES ($1, $2) RETURNING id
`

type InsertApplicationParams struct {
	Name    string
	SbomUrl pgtype.Text
}

func (q *Queries) InsertApplication(ctx context.Context, arg InsertApplicationParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertApplication, arg.Name, arg.SbomUrl)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertApplicationPackage = `-- name: InsertApplicationPackage :exec
INSERT INTO ApplicationPackages (application_id, package_id, license_id) VALUES ($1, $2, $3)
`

type InsertApplicationPackageParams struct {
	ApplicationID int32
	PackageID     int32
	LicenseID     int32
}

func (q *Queries) InsertApplicationPackage(ctx context.Context, arg InsertApplicationPackageParams) error {
	_, err := q.db.Exec(ctx, insertApplicationPackage, arg.ApplicationID, arg.PackageID, arg.LicenseID)
	return err
}

const insertLicense = `-- name: InsertLicense :one
INSERT INTO Licenses (name) VALUES ($1) RETURNING id
`

func (q *Queries) InsertLicense(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, insertLicense, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertPackage = `-- name: InsertPackage :one
INSERT INTO Packages (name) VALUES ($1) RETURNING id
`

func (q *Queries) InsertPackage(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, insertPackage, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertVersion = `-- name: InsertVersion :exec
INSERT INTO Versions (package_id, version) VALUES ($1, $2)
`

type InsertVersionParams struct {
	PackageID int32
	Version   string
}

func (q *Queries) InsertVersion(ctx context.Context, arg InsertVersionParams) error {
	_, err := q.db.Exec(ctx, insertVersion, arg.PackageID, arg.Version)
	return err
}
